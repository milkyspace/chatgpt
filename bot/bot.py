"""
–ú–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ ChatGPT.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å—é.
"""

import logging
import asyncio
import traceback
import html
import json
import base64
import io
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List, Tuple

import requests
import emoji
import pytz
import openai
import telegram
from telegram import (
    Update, User, InlineKeyboardButton, InlineKeyboardMarkup,
    BotCommand, BotCommandScopeAllPrivateChats, InputFile
)
from telegram.ext import (
    Application, ApplicationBuilder, CallbackContext, CommandHandler,
    MessageHandler, CallbackQueryHandler, AIORateLimiter, filters
)
from telegram.constants import ParseMode
from yookassa import Payment, Configuration

import config
import database
import openai_utils
from keyboards import BotKeyboards
from subscription import SubscriptionType, SUBSCRIPTION_PRICES, SUBSCRIPTION_DURATIONS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db = database.Database()
bot_instance = None
user_semaphores: Dict[int, asyncio.Semaphore] = {}
user_tasks: Dict[int, asyncio.Task] = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
HELP_MESSAGE = """<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/new ‚Äì –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ üÜï
/retry ‚Äì –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å üîÅ
/mode ‚Äì –í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º
/subscription ‚Äì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ üîî
/my_payments ‚Äì –ú–æ–∏ –ø–ª–∞—Ç–µ–∂–∏ üìã
/settings ‚Äì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è
/help ‚Äì –ü–æ–º–æ—â—å ‚ùì

üé§ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å <b>–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b> –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞

<blockquote>
1. –ß–∞—Ç –ø–æ–º–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è 10 –º–∏–Ω—É—Ç. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî /new
2. ¬´–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç¬ª ‚Äî —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã: /mode
</blockquote>
"""

HELP_GROUP_CHAT_MESSAGE = """–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –ª—é–±–æ–π <b>–≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç</b> —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
2. –°–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤–∏–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
3. –í—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã!

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ –≤ —á–∞—Ç–µ ‚Äì @ <b>—É–ø–æ–º—è–Ω–∏—Ç–µ</b> –µ–≥–æ –∏–ª–∏ <b>–æ—Ç–≤–µ—Ç—å—Ç–µ</b> –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–ù–∞–ø—Ä–∏–º–µ—Ä: "{bot_username} –Ω–∞–ø–∏—à–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ Telegram"
"""


class CustomEncoder(json.JSONEncoder):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π JSON —ç–Ω–∫–æ–¥–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ datetime –æ–±—ä–µ–∫—Ç–æ–≤."""

    def default(self, obj: Any) -> Any:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        if isinstance(obj, datetime):
            return obj.isoformat()
        return super().default(obj)


class BotHandlers:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞."""

    def __init__(self, database: database.Database):
        self.db = database

    async def register_user_if_not_exists(self, update: Update, context: CallbackContext, user: User) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """
        user_registered_now = False

        if not self.db.check_if_user_exists(user.id):
            self.db.add_new_user(
                user.id,
                update.message.chat_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            self.db.add_subscription(user.id, SubscriptionType.FREE, 7)
            user_registered_now = True
            self.db.start_new_dialog(user.id)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self._initialize_user_attributes(user.id)

        if user_registered_now:
            await self._send_registration_notification(context, user)

        return user_registered_now

    async def _initialize_user_attributes(self, user_id: int) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if self.db.get_user_attribute(user_id, "current_dialog_id") is None:
            self.db.start_new_dialog(user_id)

        if user_id not in user_semaphores:
            user_semaphores[user_id] = asyncio.Semaphore(1)

        attributes_to_init = [
            ("current_model", config.models["available_text_models"][0]),
            ("n_used_tokens", {}),
            ("n_transcribed_seconds", 0.0),
            ("n_generated_images", 0)
        ]

        for attr, default_value in attributes_to_init:
            if self.db.get_user_attribute(user_id, attr) is None:
                self.db.set_user_attribute(user_id, attr, default_value)

    async def _send_registration_notification(self, context: CallbackContext, user: User) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
        username = user.username or "No username"
        first_name = user.first_name or "No first name"
        last_name = user.last_name or "No last name"

        notification_text = (
            f"A new user has just registered!\n\n"
            f"Username: {username}\n"
            f"First Name: {first_name}\n"
            f"Last Name: {last_name}"
        )

        for admin_id in config.roles.get('admin', []):
            try:
                await context.bot.send_message(chat_id=admin_id, text=notification_text)
            except Exception as e:
                logger.warning(f"Failed to send registration to admin {admin_id}: {e}")

    async def is_bot_mentioned(self, update: Update, context: CallbackContext) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        """
        try:
            message = update.message

            if message.chat.type == "private":
                return True

            if message.text and ("@" + context.bot.username) in message.text:
                return True

            if (message.reply_to_message and
                    message.reply_to_message.from_user.id == context.bot.id):
                return True

        except Exception:
            return True

        return False

    async def is_previous_message_not_answered_yet(self, update: Update, context: CallbackContext) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        await self.register_user_if_not_exists(update, context, update.message.from_user)
        user_id = update.message.from_user.id

        if user_semaphores[user_id].locked():
            text = "‚è≥ Please <b>wait</b> for a reply to the previous message\nOr you can /cancel it"
            await update.message.reply_text(text, reply_to_message_id=update.message.id, parse_mode=ParseMode.HTML)
            return True
        return False

    async def subscription_preprocessor(self, update: Update, context: CallbackContext) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.
        """
        user_id = update.effective_user.id
        subscription_info = self.db.get_user_subscription_info(user_id)

        if not subscription_info["is_active"]:
            await update.message.reply_text(
                "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /subscription",
                parse_mode=ParseMode.HTML
            )
            return False

        return await self._check_subscription_limits(subscription_info, update)

    async def _check_subscription_limits(self, subscription_info: Dict[str, Any], update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏."""
        subscription_limits = {
            "free": 15,
            "pro_lite": 1000
        }

        subscription_type = subscription_info["type"]
        if subscription_type in subscription_limits:
            if subscription_info["requests_used"] >= subscription_limits[subscription_type]:
                await update.message.reply_text(
                    f"‚ùå –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_type} –∏—Å—á–µ—Ä–ø–∞–Ω. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /subscription",
                    parse_mode=ParseMode.HTML
                )
                return False
        return True


class MessageHandlers(BotHandlers):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""

    def __init__(self, database: database.Database, subscription_handlers: Any, chat_mode_handlers: Any):
        super().__init__(database)
        self.subscription_handlers = subscription_handlers
        self.chat_mode_handlers = chat_mode_handlers

    async def start_handle(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
        await self.register_user_if_not_exists(update, context, update.message.from_user)
        user_id = update.message.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        try:
            self.db.start_new_dialog(user_id)
            reply_text = self._get_welcome_message()
        except PermissionError:
            reply_text = self._get_no_subscription_message()

        reply_markup = await BotKeyboards.get_main_keyboard(user_id)
        await update.message.reply_text(reply_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

    def _get_welcome_message(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        return (
                "üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã <b>Ducks GPT</b>\n"
                "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —á–∞—Ç-–±–æ—Ç –Ω–∞ –±–∞–∑–µ <b>ChatGPT</b>\n"
                "–†–∞–¥—ã –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã –≤ <b>–†–§</b>üá∑üá∫\n"
                "<b>–î–∞—Ä–∏–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 7 –¥–Ω–µ–π:</b>\n"
                "- 15 –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                "- 3 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
                + HELP_MESSAGE
        )

    def _get_no_subscription_message(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
        return (
                "üëã –ü—Ä–∏–≤–µ—Ç! –ú—ã <b>Ducks GPT</b>\n"
                "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —á–∞—Ç-–±–æ—Ç –Ω–∞ –±–∞–∑–µ <b>ChatGPT</b>\n"
                "–†–∞–¥—ã –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!\n\n"
                "‚ùå <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                "üéÅ <b>100 ‚ÇΩ –∑–∞ –Ω–∞—à —Å—á—ë—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
                + HELP_MESSAGE
        )

    async def help_handle(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help."""
        await self.register_user_if_not_exists(update, context, update.message.from_user)
        user_id = update.message.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())
        await update.message.reply_text(HELP_MESSAGE, parse_mode=ParseMode.HTML)

    async def help_group_chat_handle(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help_group_chat."""
        await self.register_user_if_not_exists(update, context, update.message.from_user)
        user_id = update.message.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        text = HELP_GROUP_CHAT_MESSAGE.format(bot_username="@" + context.bot.username)
        await update.message.reply_text(text, parse_mode=ParseMode.HTML)

    async def retry_handle(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /retry."""
        await self.register_user_if_not_exists(update, context, update.message.from_user)
        if await self.is_previous_message_not_answered_yet(update, context):
            return

        user_id = update.message.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        if not await self.subscription_preprocessor(update, context):
            return

        dialog_messages = self.db.get_dialog_messages(user_id, dialog_id=None)
        if not dialog_messages:
            await update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ü§∑‚Äç‚ôÇÔ∏è")
            return

        last_dialog_message = dialog_messages.pop()
        self.db.set_dialog_messages(user_id, dialog_messages, dialog_id=None)

        await self.message_handle(update, context, message=last_dialog_message["user"], use_new_dialog_timeout=False)

    async def new_dialog_handle(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /new –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
        await self.register_user_if_not_exists(update, context, update.message.from_user)
        user_id = update.message.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å —Å vision –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_model = self.db.get_user_attribute(user_id, "current_model")
        if current_model == "gpt-4-vision-preview":
            self.db.set_user_attribute(user_id, "current_model", "gpt-4-turbo-2024-04-09")

        try:
            self.db.start_new_dialog(user_id)
            await update.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ ‚úÖ")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞
            chat_mode = self.db.get_user_attribute(user_id, "current_chat_mode")
            await update.message.reply_text(
                f"{config.chat_modes[chat_mode]['welcome_message']}",
                parse_mode=ParseMode.HTML
            )
        except PermissionError:
            await update.message.reply_text(
                "‚ùå <b>–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscription –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏",
                parse_mode=ParseMode.HTML
            )

    async def message_handle(self, update: Update, context: CallbackContext,
                             message: Optional[str] = None, use_new_dialog_timeout: bool = True) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if not await self.is_bot_mentioned(update, context):
            return

        if update.edited_message is not None:
            await self.edited_message_handle(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if await self._is_main_menu_button(update.message.text):
            await self.handle_main_menu_buttons(update, context)
            return

        processed_message = self._process_message_text(update, context, message)
        await self.register_user_if_not_exists(update, context, update.message.from_user)

        if await self.is_previous_message_not_answered_yet(update, context):
            return

        user_id = update.message.from_user.id

        if not await self.subscription_preprocessor(update, context):
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_mode = self.db.get_user_attribute(user_id, "current_chat_mode")

        if chat_mode == "artist":
            await self.generate_image_handle(update, context, message=message)
            return
        elif chat_mode == "stenographer":
            await self.voice_message_handle(update, context, message=message)
            return

        await self._handle_text_message(update, context, processed_message, use_new_dialog_timeout)

    async def _is_main_menu_button(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        main_menu_buttons = [
            emoji.emojize("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É :money_bag:"),
            emoji.emojize("–í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º :red_heart:"),
            emoji.emojize("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å :woman_and_man_holding_hands:"),
            emoji.emojize("–ü–æ–º–æ—â—å :heart_hands:"),
            emoji.emojize("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å :smiling_face_with_sunglasses:"),
            emoji.emojize("–ù–∞–∑–∞–¥ :right_arrow_curving_left:"),
        ]
        return text in main_menu_buttons

    async def handle_main_menu_buttons(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        await self.register_user_if_not_exists(update, context, update.message.from_user)
        user_id = update.message.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        text = update.message.text

        if text == emoji.emojize("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É :money_bag:"):
            await self.subscription_handlers.subscription_handle(update, context)
        elif text == emoji.emojize("–í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º :red_heart:"):
            await self.chat_mode_handlers.show_chat_modes_handle(update, context)
        elif text == emoji.emojize("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å :woman_and_man_holding_hands:"):
            await self._handle_invite(update, context)
        elif text == emoji.emojize("–ü–æ–º–æ—â—å :heart_hands:"):
            await self.help_handle(update, context)
        elif text == emoji.emojize("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å :smiling_face_with_sunglasses:"):
            await self._handle_admin_panel(update, context)
        elif text == emoji.emojize("–ù–∞–∑–∞–¥ :right_arrow_curving_left:"):
            await self._handle_back(update, context)
        elif emoji.emojize(":green_circle:") in text or emoji.emojize(":red_circle:") in text:
            await self.subscription_handlers.subscription_handle(update, context)

    async def _handle_invite(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π."""
        await update.message.reply_text(
            "üë• <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π!</b>\n\n"
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞ —Å –¥—Ä—É–∑—å—è–º–∏:\n"
            f"https://t.me/{context.bot.username}\n\n"
            "–ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π - —Ç–µ–º –ª—É—á—à–µ!",
            parse_mode=ParseMode.HTML
        )

    async def _handle_admin_panel(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
        user_id = update.message.from_user.id
        if user_id in config.roles.get('admin', []):
            await self._show_admin_panel(update, context)
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

    async def _show_admin_panel(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
        text = "üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        reply_markup = BotKeyboards.get_admin_keyboard()
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

    async def _handle_back(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'."""
        await self.register_user_if_not_exists(update, context, update.message.from_user)
        user_id = update.message.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        reply_markup = await BotKeyboards.get_main_keyboard(user_id)
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

    def _process_message_text(self, update: Update, context: CallbackContext, message: Optional[str]) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
        _message = message or update.message.text

        if update.message.chat.type != "private":
            _message = _message.replace("@" + context.bot.username, "").strip()

        return _message

    async def _handle_text_message(self, update: Update, context: CallbackContext,
                                   message: str, use_new_dialog_timeout: bool) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        user_id = update.message.from_user.id
        current_model = self.db.get_user_attribute(user_id, "current_model")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (current_model == "gpt-4-vision-preview" or
                (update.message.photo and len(update.message.photo) > 0)):

            if current_model != "gpt-4-vision-preview":
                current_model = "gpt-4-vision-preview"
                self.db.set_user_attribute(user_id, "current_model", "gpt-4-vision-preview")

            task = asyncio.create_task(
                self._vision_message_handle_fn(update, context, use_new_dialog_timeout)
            )
        else:
            task = asyncio.create_task(
                self._text_message_handle_fn(update, context, message, use_new_dialog_timeout)
            )

        await self._execute_user_task(user_id, task, update)

    async def _execute_user_task(self, user_id: int, task: asyncio.Task, update: Update) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—Ç–º–µ–Ω—ã."""
        user_tasks[user_id] = task

        try:
            await task
        except asyncio.CancelledError:
            await update.message.reply_text("‚úÖ Canceled", parse_mode=ParseMode.HTML)
        finally:
            if user_id in user_tasks:
                del user_tasks[user_id]

    async def _text_message_handle_fn(self, update: Update, context: CallbackContext,
                                      message: str, use_new_dialog_timeout: bool) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)."""
        user_id = update.message.from_user.id
        chat_mode = self.db.get_user_attribute(user_id, "current_chat_mode")

        await self._prepare_dialog(user_id, use_new_dialog_timeout, chat_mode, update)

        if not message or len(message) == 0:
            await update.message.reply_text("ü•≤ You sent <b>empty message</b>. Please, try again!",
                                            parse_mode=ParseMode.HTML)
            return

        try:
            async with user_semaphores[user_id]:
                placeholder_message = await update.message.reply_text("<i>–î—É–º–∞—é...</i>", parse_mode=ParseMode.HTML)
                await update.message.chat.send_action(action="typing")

                dialog_messages = self.db.get_dialog_messages(user_id, dialog_id=None)
                answer, n_input_tokens, n_output_tokens = await self._get_chatgpt_response(
                    message, dialog_messages, chat_mode, user_id
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –∏ —Ç–æ–∫–µ–Ω—ã
                new_dialog_message = {"user": [{"type": "text", "text": message}], "bot": answer,
                                      "date": datetime.now()}
                self._update_dialog_and_tokens(user_id, new_dialog_message, n_input_tokens, n_output_tokens)

                await self._edit_message_with_retry(context, placeholder_message, answer, chat_mode)

        except Exception as e:
            await self._handle_message_error(update, e)

    async def _get_chatgpt_response(self, message: str, dialog_messages: List[Dict],
                                    chat_mode: str, user_id: str) -> Tuple[str, int, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT."""
        current_model = self.db.get_user_attribute(user_id, "current_model")
        chatgpt_instance = openai_utils.ChatGPT(model=current_model)

        if config.enable_message_streaming:
            return await self._get_streamed_response(chatgpt_instance, message, dialog_messages, chat_mode)
        else:
            answer, (n_input_tokens, n_output_tokens), _ = await chatgpt_instance.send_message(
                message, dialog_messages=dialog_messages, chat_mode=chat_mode
            )
            return answer, n_input_tokens, n_output_tokens

    async def _get_streamed_response(self, chatgpt_instance: openai_utils.ChatGPT, message: str,
                                     dialog_messages: List[Dict], chat_mode: str) -> Tuple[str, int, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT."""
        gen = chatgpt_instance.send_message_stream(message, dialog_messages=dialog_messages, chat_mode=chat_mode)
        answer = ""
        n_input_tokens, n_output_tokens = 0, 0

        async for gen_item in gen:
            status, chunk_answer, (chunk_n_input_tokens, chunk_n_output_tokens), _ = gen_item

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –Ω–µ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º, –∞ –∑–∞–º–µ–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            # –í –ø–æ—Ç–æ–∫–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
            answer = chunk_answer
            n_input_tokens, n_output_tokens = chunk_n_input_tokens, chunk_n_output_tokens

            if status == "finished":
                break

        return answer, n_input_tokens, n_output_tokens

    async def _prepare_dialog(self, user_id: int, use_new_dialog_timeout: bool,
                              chat_mode: str, update: Update) -> None:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if use_new_dialog_timeout:
            last_interaction = self.db.get_user_attribute(user_id, "last_interaction")
            dialog_messages = self.db.get_dialog_messages(user_id)

            if (datetime.now() - last_interaction).seconds > config.new_dialog_timeout and len(dialog_messages) > 0:
                self.db.start_new_dialog(user_id)
                await update.message.reply_text(
                    f"–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (<b>{config.chat_modes[chat_mode]['name']}</b>) ‚úÖ",
                    parse_mode=ParseMode.HTML
                )

        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

    def _update_dialog_and_tokens(self, user_id: int, new_dialog_message: Dict,
                                  n_input_tokens: int, n_output_tokens: int) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤."""
        current_model = self.db.get_user_attribute(user_id, "current_model")
        current_dialog_messages = self.db.get_dialog_messages(user_id, dialog_id=None)
        self.db.set_dialog_messages(user_id, current_dialog_messages + [new_dialog_message], dialog_id=None)

        self.db.update_n_used_tokens(user_id, current_model, n_input_tokens, n_output_tokens)

        action_type = self.db.get_user_attribute(user_id, "current_model")
        self.db.deduct_cost_for_action(
            user_id=user_id,
            action_type=action_type,
            action_params={'n_input_tokens': n_input_tokens, 'n_output_tokens': n_output_tokens}
        )

    async def _edit_message_with_retry(self, context: CallbackContext, placeholder_message: telegram.Message,
                                       answer: str, chat_mode: str) -> None:
        """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö."""
        parse_mode = {
            "html": ParseMode.HTML,
            "markdown": ParseMode.MARKDOWN
        }[config.chat_modes[chat_mode]["parse_mode"]]

        try:
            await context.bot.edit_message_text(
                answer[:4096],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
                chat_id=placeholder_message.chat_id,
                message_id=placeholder_message.message_id,
                parse_mode=parse_mode,
                disable_web_page_preview=True
            )
        except telegram.error.BadRequest as e:
            if not str(e).startswith("Message is not modified"):
                await context.bot.edit_message_text(
                    answer[:4096],
                    chat_id=placeholder_message.chat_id,
                    message_id=placeholder_message.message_id,
                    disable_web_page_preview=True
                )

    async def _handle_message_error(self, update: Update, error: Exception) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        error_text = f"Something went wrong during completion. Reason: {error}"
        logger.error(error_text)
        await update.message.reply_text(error_text)

    async def _vision_message_handle_fn(self, update: Update, context: CallbackContext,
                                        use_new_dialog_timeout: bool = True) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è GPT-4 Vision."""
        logger.info('_vision_message_handle_fn')
        user_id = update.message.from_user.id
        current_model = self.db.get_user_attribute(user_id, "current_model")

        if current_model != "gpt-4-vision-preview":
            await update.message.reply_text(
                "ü•≤ Images processing is only available for the <b>GPT-4 Vision</b> model. Please change your settings in /settings",
                parse_mode=ParseMode.HTML,
            )
            return

        chat_mode = self.db.get_user_attribute(user_id, "current_chat_mode")

        if use_new_dialog_timeout:
            last_interaction = self.db.get_user_attribute(user_id, "last_interaction")
            dialog_messages = self.db.get_dialog_messages(user_id)

            if (datetime.now() - last_interaction).seconds > config.new_dialog_timeout and len(dialog_messages) > 0:
                self.db.start_new_dialog(user_id)
                await update.message.reply_text(
                    f"–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (<b>{config.chat_modes[chat_mode]['name']}</b>) ‚úÖ",
                    parse_mode=ParseMode.HTML
                )

        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        transcribed_text = ''
        buf = None

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message.voice:
            voice = update.message.voice
            voice_file = await context.bot.get_file(voice.file_id)

            buf = io.BytesIO()
            await voice_file.download_to_memory(buf)
            buf.name = "voice.oga"
            buf.seek(0)

            transcribed_text = await openai_utils.transcribe_audio(buf)
            transcribed_text = transcribed_text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if update.message.photo:
            photo = update.message.photo[-1]
            photo_file = await context.bot.get_file(photo.file_id)

            buf = io.BytesIO()
            await photo_file.download_to_memory(buf)
            buf.name = "image.jpg"
            buf.seek(0)

        n_input_tokens, n_output_tokens = 0, 0

        try:
            placeholder_message = await update.message.reply_text("<i>–î—É–º–∞—é...</i>", parse_mode=ParseMode.HTML)
            message_text = update.message.caption or update.message.text or transcribed_text or ''

            await update.message.chat.send_action(action="typing")

            dialog_messages = self.db.get_dialog_messages(user_id, dialog_id=None)
            parse_mode = {
                "html": ParseMode.HTML,
                "markdown": ParseMode.MARKDOWN
            }[config.chat_modes[chat_mode]["parse_mode"]]

            chatgpt_instance = openai_utils.ChatGPT(model=current_model)

            if config.enable_message_streaming:
                gen = chatgpt_instance.send_vision_message_stream(
                    message_text,
                    dialog_messages=dialog_messages,
                    image_buffer=buf,
                    chat_mode=chat_mode,
                )
            else:
                answer, (n_input_tokens, n_output_tokens), _ = await chatgpt_instance.send_vision_message(
                    message_text,
                    dialog_messages=dialog_messages,
                    image_buffer=buf,
                    chat_mode=chat_mode,
                )

                async def fake_gen():
                    yield "finished", answer, (n_input_tokens, n_output_tokens), 0

                gen = fake_gen()

            prev_answer = ""
            async for gen_item in gen:
                status, answer, (n_input_tokens, n_output_tokens), _ = gen_item
                answer = answer[:4096]

                if abs(len(answer) - len(prev_answer)) < 100 and status != "finished":
                    continue

                try:
                    await context.bot.edit_message_text(
                        answer,
                        chat_id=placeholder_message.chat_id,
                        message_id=placeholder_message.message_id,
                        parse_mode=parse_mode,
                    )
                except telegram.error.BadRequest as e:
                    if not str(e).startswith("Message is not modified"):
                        await context.bot.edit_message_text(
                            answer,
                            chat_id=placeholder_message.chat_id,
                            message_id=placeholder_message.message_id,
                        )

                await asyncio.sleep(0.01)
                prev_answer = answer

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
            if buf is not None:
                base_image = base64.b64encode(buf.getvalue()).decode("utf-8")
                new_dialog_message = {
                    "user": [
                        {"type": "text", "text": message_text},
                        {"type": "image", "image": base_image}
                    ],
                    "bot": answer,
                    "date": datetime.now()
                }
            else:
                new_dialog_message = {"user": message_text, "bot": answer, "date": datetime.now()}

            self._update_dialog_and_tokens(user_id, new_dialog_message, n_input_tokens, n_output_tokens)

        except asyncio.CancelledError:
            self.db.update_n_used_tokens(user_id, current_model, n_input_tokens, n_output_tokens)
            raise
        except Exception as e:
            error_text = f"Something went wrong during completion_1. Reason: {e}"
            logger.error(error_text)
            await update.message.reply_text(error_text)

    async def voice_message_handle(self, update: Update, context: CallbackContext, message: Optional[str] = None) -> \
    Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if not await self.is_bot_mentioned(update, context):
            return

        await self.register_user_if_not_exists(update, context, update.message.from_user)
        if await self.is_previous_message_not_answered_yet(update, context):
            return

        user_id = update.message.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        if not await self.subscription_preprocessor(update, context):
            return

        chat_mode = self.db.get_user_attribute(user_id, "current_chat_mode")
        transcribed_text = await self._transcribe_voice_message(update, context, chat_mode)

        if chat_mode == "stenographer":
            return  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ _transcribe_voice_message

        await self.message_handle(update, context, message=transcribed_text)
        return transcribed_text

    async def _transcribe_voice_message(self, update: Update, context: CallbackContext, chat_mode: str) -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        placeholder_text = "‚å®Ô∏è: <i>–†–∞—Å–ø–æ–∑–Ω–∞—é –∞—É–¥–∏–æ...</i>" if chat_mode == "stenographer" else "üé§: <i>–†–∞—Å–ø–æ–∑–Ω–∞—é –∞—É–¥–∏–æ...</i>"
        placeholder_message = await update.message.reply_text(placeholder_text, parse_mode=ParseMode.HTML)

        voice = update.message.voice
        voice_file = await context.bot.get_file(voice.file_id)

        buf = io.BytesIO()
        await voice_file.download_to_memory(buf)
        buf.name = "voice.oga"
        buf.seek(0)

        transcribed_text = await openai_utils.transcribe_audio(buf)
        text = f"üé§: <i>{transcribed_text}</i>"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        user_id = update.message.from_user.id
        audio_duration_minutes = voice.duration / 60.0
        self.db.set_user_attribute(user_id, "n_transcribed_seconds",
                                   voice.duration + self.db.get_user_attribute(user_id, "n_transcribed_seconds"))
        self.db.deduct_cost_for_action(
            user_id=user_id,
            action_type='whisper',
            action_params={'audio_duration_minutes': audio_duration_minutes}
        )

        if chat_mode == "stenographer":
            transcription_message = f"Your transcription is in: \n\n<code>{transcribed_text}</code>"
            await context.bot.edit_message_text(
                transcription_message,
                chat_id=placeholder_message.chat_id,
                message_id=placeholder_message.message_id,
                parse_mode=ParseMode.HTML
            )
        else:
            await context.bot.edit_message_text(
                text,
                chat_id=placeholder_message.chat_id,
                message_id=placeholder_message.message_id,
                parse_mode=ParseMode.HTML
            )

        return transcribed_text

    async def edited_message_handle(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        if update.edited_message.chat.type == "private":
            text = "ü•≤ Unfortunately, message <b>editing</b> is not supported"
            await update.edited_message.reply_text(text, parse_mode=ParseMode.HTML)

    async def cancel_handle(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /cancel."""
        await self.register_user_if_not_exists(update, context, update.message.from_user)
        user_id = update.message.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        if user_id in user_tasks:
            user_tasks[user_id].cancel()
        else:
            await update.message.reply_text("<i>–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å...</i>", parse_mode=ParseMode.HTML)


class ChatModeHandlers(BotHandlers):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∂–∏–º–æ–≤ —á–∞—Ç–∞."""

    def get_chat_mode_menu(self, page_index: int):
        """
        –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞.
        """
        n_chat_modes_per_page = config.n_chat_modes_per_page
        text = f"–í—ã–±–µ—Ä–∏—Ç–µ <b>—Ä–µ–∂–∏–º —á–∞—Ç–∞</b> (–î–æ—Å—Ç—É–ø–Ω–æ {len(config.chat_modes)} —Ä–µ–∂–∏–º–æ–≤):"

        chat_mode_keys = list(config.chat_modes.keys())
        page_chat_mode_keys = chat_mode_keys[
                              page_index * n_chat_modes_per_page:(page_index + 1) * n_chat_modes_per_page
                              ]

        keyboard = []
        row = []
        for chat_mode_key in page_chat_mode_keys:
            name = config.chat_modes[chat_mode_key]["name"]
            row.append(InlineKeyboardButton(name, callback_data=f"set_chat_mode|{chat_mode_key}"))
            if len(row) == 2:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(chat_mode_keys) > n_chat_modes_per_page:
            is_first_page = (page_index == 0)
            is_last_page = ((page_index + 1) * n_chat_modes_per_page >= len(chat_mode_keys))

            pagination_row = []
            if not is_first_page:
                pagination_row.append(InlineKeyboardButton("¬´", callback_data=f"show_chat_modes|{page_index - 1}"))
            if not is_last_page:
                pagination_row.append(InlineKeyboardButton("¬ª", callback_data=f"show_chat_modes|{page_index + 1}"))
            if pagination_row:
                keyboard.append(pagination_row)

        reply_markup = InlineKeyboardMarkup(keyboard)
        return text, reply_markup

    async def show_chat_modes_handle(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /mode."""
        await self.register_user_if_not_exists(update, context, update.message.from_user)
        if await self.is_previous_message_not_answered_yet(update, context):
            return

        user_id = update.message.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        text, reply_markup = self.get_chat_mode_menu(0)
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

    async def show_chat_modes_callback_handle(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–æ–≤ —á–∞—Ç–∞."""
        await self.register_user_if_not_exists(update.callback_query, context, update.callback_query.from_user)
        user_id = update.callback_query.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        query = update.callback_query
        await query.answer()

        page_index = int(query.data.split("|")[1])
        if page_index < 0:
            return

        text, reply_markup = self.get_chat_mode_menu(page_index)
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
        except telegram.error.BadRequest as e:
            if not str(e).startswith("Message is not modified"):
                raise

    async def set_chat_mode_handle(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞."""
        await self.register_user_if_not_exists(update.callback_query, context, update.callback_query.from_user)
        user_id = update.callback_query.from_user.id

        query = update.callback_query
        await query.answer()

        chat_mode = query.data.split("|")[1]

        self.db.set_user_attribute(user_id, "current_chat_mode", chat_mode)
        self.db.start_new_dialog(user_id)

        await context.bot.send_message(
            update.callback_query.message.chat.id,
            f"{config.chat_modes[chat_mode]['welcome_message']}",
            parse_mode=ParseMode.HTML
        )


class SubscriptionHandlers(BotHandlers):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–ª–∞—Ç–µ–∂–µ–π."""

    async def subscription_handle(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏."""
        try:
            user = self._get_user_from_update(update)
            await self.register_user_if_not_exists(update, context, user)
            user_id = user.id
            self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

            subscription_info = self.db.get_user_subscription_info(user_id)
            text = self._format_subscription_info(subscription_info)
            reply_markup = self._create_subscription_keyboard()

            await self._send_subscription_message(update, text, reply_markup)

        except Exception as e:
            logger.error(f"Error in subscription_handle: {e}")
            await self._handle_subscription_error(update)

    def _get_user_from_update(self, update: Update):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ update."""
        if update.message is not None:
            return update.message.from_user
        else:
            return update.callback_query.from_user

    def _format_subscription_info(self, subscription_info: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ."""
        text = ""
        if subscription_info["is_active"]:
            if subscription_info["type"] != "free":
                expires_str = subscription_info["expires_at"].strftime("%d.%m.%Y")
                text += f"üìã <b>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_info['type'].upper()}\n"
                text += f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {expires_str}\n"
            else:
                text += f"üìã <b>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø\n"

            usage_text = self._format_usage_info(subscription_info)
            text += usage_text + "\n"

        text += "üîî <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        text += self._format_available_subscriptions()

        return text

    def _format_usage_info(self, subscription_info: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏."""
        usage_limits = {
            "free": (15, 3),
            "pro_lite": (1000, 20)
        }

        subscription_type = subscription_info["type"]
        if subscription_type in usage_limits:
            max_requests, max_images = usage_limits[subscription_type]
            return (
                f"üìä <b>–ó–∞–ø—Ä–æ—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {subscription_info['requests_used']}/{max_requests}\n"
                f"üé® <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {subscription_info['images_used']}/{max_images}"
            )
        return ""

    def _format_available_subscriptions(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö."""
        subscriptions = [
            {
                "name": "Pro Lite",
                "type": SubscriptionType.PRO_LITE,
                "price": 10,
                "duration": "10 –¥–Ω–µ–π",
                "features": "1000 –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Ä¢ 20 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Ä¢ –î–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤"
            },
            {
                "name": "Pro Plus",
                "type": SubscriptionType.PRO_PLUS,
                "price": 10,
                "duration": "1 –º–µ—Å—è—Ü",
                "features": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ‚Ä¢ –î–æ 32000 —Å–∏–º–≤–æ–ª–æ–≤"
            },
            {
                "name": "Pro Premium",
                "type": SubscriptionType.PRO_PREMIUM,
                "price": 10,
                "duration": "3 –º–µ—Å—è—Ü–∞",
                "features": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ‚Ä¢ –î–æ 32000 —Å–∏–º–≤–æ–ª–æ–≤"
            }
        ]

        text = ""
        for sub in subscriptions:
            text += f"<b>{sub['name']}</b> - {sub['price']}‚ÇΩ / {sub['duration']}\n"
            text += f"   {sub['features']}\n\n"

        return text

    def _create_subscription_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
        subscriptions = [
            ("Pro Lite - 10‚ÇΩ", SubscriptionType.PRO_LITE),
            ("Pro Plus - 10‚ÇΩ", SubscriptionType.PRO_PLUS),
            ("Pro Premium - 10‚ÇΩ", SubscriptionType.PRO_PREMIUM)
        ]

        keyboard = []
        for name, sub_type in subscriptions:
            callback_data = f"subscribe|{sub_type.value}"
            keyboard.append([InlineKeyboardButton(name, callback_data=callback_data)])

        return InlineKeyboardMarkup(keyboard)

    async def _send_subscription_message(self, update: Update, text: str,
                                         reply_markup: InlineKeyboardMarkup) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö."""
        if update.message is not None:
            await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)
        else:
            try:
                await update.callback_query.edit_message_text(
                    text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
                )
            except telegram.error.BadRequest as e:
                if "Message is not modified" not in str(e):
                    await update.callback_query.message.reply_text(
                        text, parse_mode=ParseMode.HTML, reply_markup=reply_markup
                    )

    async def _handle_subscription_error(self, update: Update) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏."""
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        if update.callback_query:
            await update.callback_query.message.reply_text(error_text, parse_mode=ParseMode.HTML)

    async def subscription_callback_handle(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏."""
        query = update.callback_query
        await query.answer()

        data = query.data

        if data == "subscription_back":
            await self._handle_subscription_back(query)
            return

        if data.startswith("subscribe|"):
            await self._handle_subscription_payment(query, context)

    async def _handle_subscription_back(self, query: telegram.CallbackQuery) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫."""
        reply_text = "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...\n\n" + HELP_MESSAGE
        try:
            await query.edit_message_text(
                reply_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True
            )
        except telegram.error.BadRequest as e:
            if "Message is not modified" not in str(e):
                await query.message.reply_text(
                    reply_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True
                )

    async def _handle_subscription_payment(self, query: telegram.CallbackQuery, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏."""
        try:
            _, subscription_type_str = query.data.split("|")
            subscription_type = SubscriptionType(subscription_type_str)

            payment_url = await create_subscription_yookassa_payment(
                query.from_user.id, subscription_type, context
            )

            text = self._format_payment_message(subscription_type)
            keyboard = self._create_payment_keyboard(payment_url)

            await query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"Error in subscription payment: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.HTML
            )

    def _format_payment_message(self, subscription_type: SubscriptionType) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ."""
        price = SUBSCRIPTION_PRICES[subscription_type]
        duration = SUBSCRIPTION_DURATIONS[subscription_type]

        return (
            f"üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_type.name.replace('_', ' ').title()}</b>\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price}‚ÇΩ</b>\n"
            f"–ü–µ—Ä–∏–æ–¥: <b>{duration.days} –¥–Ω–µ–π</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        )

    def _create_payment_keyboard(self, payment_url: str):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã."""
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="subscription_back")]
        ]
        return InlineKeyboardMarkup(keyboard)


class ImageHandlers(BotHandlers):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""

    async def generate_image_handle(self, update: Update, context: CallbackContext,
                                    message: Optional[str] = None) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        await self.register_user_if_not_exists(update, context, update.message.from_user)
        if await self.is_previous_message_not_answered_yet(update, context):
            return

        user_id = update.message.from_user.id
        self.db.set_user_attribute(user_id, "last_interaction", datetime.now())

        if not await self.subscription_preprocessor(update, context):
            return

        await update.message.chat.send_action(action="upload_photo")

        prompt = message or update.message.text
        placeholder_message = await update.message.reply_text("<i>–†–∏—Å—É–µ–º...</i>", parse_mode=ParseMode.HTML)

        try:
            image_urls = await self._generate_images(user_id, prompt)
            await self._send_generated_images(update, context, prompt, image_urls, placeholder_message)

        except openai.error.InvalidRequestError as e:
            await self._handle_image_generation_error(update, e)
        except Exception as e:
            await self._handle_image_generation_error(update, e, is_unexpected=True)

    async def _generate_images(self, user_id: int, prompt: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI."""
        user_preferences = self.db.get_user_attribute(user_id, "image_preferences")
        model = user_preferences.get("model", "dalle-2")
        n_images = user_preferences.get("n_images", 3)
        resolution = user_preferences.get("resolution", "1024x1024")

        image_urls = await openai_utils.generate_images(
            prompt=prompt, model=model, n_images=n_images, size=resolution
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self._update_image_usage_stats(user_id, user_preferences, n_images)

        return image_urls

    def _update_image_usage_stats(self, user_id: int, user_preferences: Dict[str, Any], n_images: int) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        self.db.set_user_attribute(
            user_id, "n_generated_images",
            n_images + self.db.get_user_attribute(user_id, "n_generated_images")
        )

        action_type = user_preferences.get("model", "dalle-3")
        action_params = {
            "model": user_preferences.get("model", "dalle-2"),
            "quality": user_preferences.get("quality", "standard"),
            "resolution": user_preferences.get("resolution", "1024x1024"),
            "n_images": n_images
        }

        self.db.deduct_cost_for_action(
            user_id=user_id,
            action_type=action_type,
            action_params=action_params
        )

    async def _send_generated_images(self, update: Update, context: CallbackContext, prompt: str,
                                     image_urls: List[str], placeholder_message: telegram.Message) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        pre_generation_message = f"–ù–∞—Ä–∏—Å–æ–≤–∞–ª–∏ üé®:\n\n  <i>{prompt or ''}</i>  \n\n –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!"
        await context.bot.edit_message_text(
            pre_generation_message,
            chat_id=placeholder_message.chat_id,
            message_id=placeholder_message.message_id,
            parse_mode=ParseMode.HTML
        )

        for image_url in image_urls:
            await update.message.chat.send_action(action="upload_photo")
            await self._upload_image_from_url(context.bot, update.message.chat_id, image_url)

        post_generation_message = f"–ù–∞—Ä–∏—Å–æ–≤–∞–ª–∏ üé®:\n\n  <i>{prompt or ''}</i>  \n\n –ö–∞–∫ –≤–∞–º??"
        await context.bot.edit_message_text(
            post_generation_message,
            chat_id=placeholder_message.chat_id,
            message_id=placeholder_message.message_id,
            parse_mode=ParseMode.HTML
        )

    async def _upload_image_from_url(self, bot: telegram.Bot, chat_id: int, image_url: str) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ."""
        response = requests.get(image_url, stream=True)
        if response.status_code == 200:
            image_buffer = io.BytesIO(response.content)
            image_buffer.name = "image.jpg"
            await bot.send_photo(chat_id=chat_id, photo=InputFile(image_buffer, "image.jpg"))

    async def _handle_image_generation_error(self, update: Update, error: Exception,
                                             is_unexpected: bool = False) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        if is_unexpected:
            error_text = f"‚ö†Ô∏è An unexpected error occurred. Please try again. \n\n<b>Reason</b>: {str(error)}"
        else:
            if str(error).startswith("Your request was rejected as a result of our safety system"):
                error_text = "ü•≤ Your request <b>doesn't comply</b> with OpenAI's usage policies.\nWhat did you write there, huh??"
            else:
                error_text = f"‚ö†Ô∏è There was an issue with your request. Please try again.\n\n<b>Reason</b>: {str(error)}"

        await update.message.reply_text(error_text, parse_mode=ParseMode.HTML)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
async def create_subscription_yookassa_payment(user_id: int, subscription_type: SubscriptionType,
                                               context: CallbackContext) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ Yookassa –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    price = SUBSCRIPTION_PRICES[subscription_type]

    try:
        description = f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription_type.name.replace('_', ' ').title()}"
        payment = Payment.create({
            "amount": {"value": price, "currency": "RUB"},
            "confirmation": {"type": "redirect", "return_url": "https://t.me/gptducksbot"},
            "capture": True,
            "description": description,
            "receipt": {
                "customer": {
                    "email": "liliatchesnokova@gmail.com",
                },
                "items": [
                    {
                        "description": description,
                        "quantity": "1.00",
                        "amount": {
                            "value": price,
                            "currency": "RUB"
                        },
                        "vat_code": "1",
                        "payment_mode": "full_payment",
                        "payment_subject": "commodity",
                    },
                ]
            },
            "metadata": {"user_id": user_id, "subscription_type": subscription_type.value}
        })

        db.create_payment(
            user_id=user_id,
            payment_id=payment.id,
            amount=price,
            payment_type="subscription",
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {subscription_type.name.replace('_', ' ').title()}"
        )

        return payment.confirmation.confirmation_url

    except Exception as e:
        logger.error(f"Error creating Yookassa subscription payment: {e}")
        raise e


async def process_successful_payment(payment_info: Any, user_id: int) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂.
    """
    try:
        metadata = payment_info.metadata
        subscription_type = metadata.get('subscription_type')

        logger.info(f"Processing successful payment {payment_info.id} for user {user_id}")

        if subscription_type:
            subscription_type_enum = SubscriptionType(subscription_type)
            duration_days = SUBSCRIPTION_DURATIONS[subscription_type_enum].days

            db.add_subscription(user_id, subscription_type_enum, duration_days)
            await send_subscription_confirmation(user_id, subscription_type_enum)
            logger.info(f"Subscription activated for user {user_id}: {subscription_type}")

    except Exception as e:
        logger.error(f"Error processing successful payment: {e}")


async def send_subscription_confirmation(user_id: int, subscription_type: SubscriptionType) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    user = db.user_collection.find_one({"_id": user_id})
    if user:
        chat_id = user["chat_id"]
        duration_days = SUBSCRIPTION_DURATIONS[subscription_type].days

        message = (
            f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ *{subscription_type.name.replace('_', ' ').title()}* –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç *{duration_days} –¥–Ω–µ–π*\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ!"
        )

        await bot_instance.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def split_text_into_chunks(text: str, chunk_size: int):
    """
    –†–∞–∑–¥–µ–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
    """
    for i in range(0, len(text), chunk_size):
        yield text[i:i + chunk_size]


def update_user_roles_from_config(database: database.Database, roles: Dict[str, List[int]]) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    for role, user_ids in roles.items():
        for user_id in user_ids:
            database.user_collection.update_one(
                {"_id": user_id},
                {"$set": {"role": role}}
            )
    logger.info("User roles updated from config.")


def configure_logging() -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    log_level = logging.DEBUG if config.enable_detailed_logging else logging.CRITICAL
    logging.basicConfig(
        level=log_level,
        format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
    )
    logger.setLevel(logging.getLogger().level)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def post_init(application: Application) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    commands = [
        BotCommand("/new", "–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ üÜï"),
        BotCommand("/retry", "–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å üîÅ"),
        BotCommand("/mode", "–í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º"),
        BotCommand("/subscription", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ üîî"),
        BotCommand("/my_payments", "–ú–æ–∏ –ø–ª–∞—Ç–µ–∂–∏ üìã"),
        BotCommand("/settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"),
        BotCommand("/help", "–ü–æ–º–æ—â—å ‚ùì"),
    ]

    await application.bot.set_my_commands(commands, scope=BotCommandScopeAllPrivateChats())

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    if config.yookassa_shop_id and config.yookassa_secret_key:
        application.job_queue.run_repeating(
            check_pending_payments_wrapper,
            interval=30,
            first=10
        )


async def check_pending_payments_wrapper(context: CallbackContext) -> None:
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ pending –ø–ª–∞—Ç–µ–∂–µ–π.
    """
    try:
        await check_pending_payments()
    except Exception as e:
        logger.error(f"Error in payment checking job: {e}")


async def check_pending_payments() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å pending –ø–ª–∞—Ç–µ–∂–µ–π."""
    try:
        pending_payments = db.get_pending_payments()
        for payment in pending_payments:
            payment_id = payment["payment_id"]
            user_id = payment["user_id"]

            try:
                payment_info = Payment.find_one(payment_id)
                status = payment_info.status
                db.update_payment_status(payment_id, status)

                if status == 'succeeded':
                    await process_successful_payment(payment_info, user_id)
                elif status == 'canceled':
                    logger.info(f"Payment {payment_id} was canceled")

            except Exception as e:
                logger.error(f"Error checking payment {payment_id}: {e}")

    except Exception as e:
        logger.error(f"Error in payment checking: {e}")


def run_bot() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    global bot_instance

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Yookassa
    if config.yookassa_shop_id and config.yookassa_secret_key:
        Configuration.account_id = config.yookassa_shop_id
        Configuration.secret_key = config.yookassa_secret_key

    update_user_roles_from_config(db, config.roles)
    configure_logging()

    # –°–æ–∑–¥–∞–µ–º application
    application = (
        ApplicationBuilder()
        .token(config.telegram_token)
        .concurrent_updates(True)
        .rate_limiter(AIORateLimiter(max_retries=5))
        .http_version("1.1")
        .get_updates_http_version("1.1")
        .post_init(post_init)
        .build()
    )

    bot_instance = application.bot

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    subscription_handlers = SubscriptionHandlers(db)
    image_handlers = ImageHandlers(db)
    chat_mode_handlers = ChatModeHandlers(db)
    message_handlers = MessageHandlers(db, subscription_handlers, chat_mode_handlers)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_filter = filters.ALL
    if config.allowed_telegram_usernames:
        usernames = [x for x in config.allowed_telegram_usernames if isinstance(x, str)]
        any_ids = [x for x in config.allowed_telegram_usernames if isinstance(x, int)]
        user_ids = [x for x in any_ids if x > 0]
        group_ids = [x for x in any_ids if x < 0]
        user_filter = (filters.User(username=usernames) |
                       filters.User(user_id=user_ids) |
                       filters.Chat(chat_id=group_ids))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", message_handlers.start_handle, filters=user_filter))
    application.add_handler(CommandHandler("help", message_handlers.help_handle, filters=user_filter))
    application.add_handler(
        CommandHandler("help_group_chat", message_handlers.help_group_chat_handle, filters=user_filter))
    application.add_handler(CommandHandler("retry", message_handlers.retry_handle, filters=user_filter))
    application.add_handler(CommandHandler("new", message_handlers.new_dialog_handle, filters=user_filter))
    application.add_handler(CommandHandler("cancel", message_handlers.cancel_handle, filters=user_filter))
    application.add_handler(CommandHandler("mode", chat_mode_handlers.show_chat_modes_handle, filters=user_filter))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & user_filter,
                                           message_handlers.message_handle))
    application.add_handler(MessageHandler(filters.VOICE & user_filter,
                                           message_handlers.voice_message_handle))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    application.add_handler(
        CommandHandler("subscription", subscription_handlers.subscription_handle, filters=user_filter))
    application.add_handler(CallbackQueryHandler(subscription_handlers.subscription_callback_handle,
                                                 pattern='^subscribe\\|'))
    application.add_handler(CallbackQueryHandler(subscription_handlers.subscription_handle,
                                                 pattern='^subscription_back$'))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤ —á–∞—Ç–∞
    application.add_handler(CallbackQueryHandler(chat_mode_handlers.show_chat_modes_callback_handle,
                                                 pattern="^show_chat_modes"))
    application.add_handler(CallbackQueryHandler(chat_mode_handlers.set_chat_mode_handle,
                                                 pattern="^set_chat_mode"))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handle)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


async def error_handle(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –±–æ—Ç–∞."""
    logger.error("Exception while handling an update:", exc_info=context.error)

    try:
        tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
        tb_string = "".join(tb_list)
        update_str = update.to_dict() if isinstance(update, Update) else str(update)

        message = (
            f"An exception was raised while handling an update\n"
            f"<pre>update = {html.escape(json.dumps(update_str, indent=2, ensure_ascii=False))}</pre>\n\n"
            f"<pre>{html.escape(tb_string)}</pre>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_for_user = (
            f"An unexpected error occurred. "
            f"Please try again or contact support if the issue persists."
        )

        await context.bot.send_message(update.effective_chat.id, error_for_user)

    except Exception as handler_error:
        logger.error("Error in error handler: %s", handler_error)


if __name__ == "__main__":
    run_bot()